import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue import DynamicFrame

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Script generated for node S3 team play
S3teamplay_node1720031080053 = glueContext.create_dynamic_frame.from_catalog(database="test-glue", table_name="demo_teams_teamplay_2024_05_21_csv", transformation_ctx="S3teamplay_node1720031080053")

# Script generated for node S3 overview
S3overview_node1720028099561 = glueContext.create_dynamic_frame.from_catalog(database="test-glue", table_name="demo_teams_overview_2024_05_21_csv", transformation_ctx="S3overview_node1720028099561")

# Script generated for node S3 discipline
S3discipline_node1720028099007 = glueContext.create_dynamic_frame.from_catalog(database="test-glue", table_name="demo_teams_discipline_2024_05_21_csv", transformation_ctx="S3discipline_node1720028099007")

# Script generated for node S3 defence
S3defence_node1720028098466 = glueContext.create_dynamic_frame.from_catalog(database="test-glue", table_name="demo_teams_defence_2024_05_21_csv", transformation_ctx="S3defence_node1720028098466")

# Script generated for node S3 stats
S3stats_node1720031079357 = glueContext.create_dynamic_frame.from_catalog(database="test-glue", table_name="demo_teams_stats_2024_05_21_csv", transformation_ctx="S3stats_node1720031079357")

# Script generated for node S3 attack
S3attack_node1720028082379 = glueContext.create_dynamic_frame.from_catalog(database="test-glue", table_name="demo_teams_attack_2024_05_21_csv", transformation_ctx="S3attack_node1720028082379")

# Script generated for node Join 2
Join2_node1720033785892 = Join.apply(frame1=S3discipline_node1720028099007, frame2=S3teamplay_node1720031080053, keys1=["team_id", "season"], keys2=["team_id", "season"], transformation_ctx="Join2_node1720033785892")

# Script generated for node Join 1
Join1_node1720030079578 = Join.apply(frame1=S3attack_node1720028082379, frame2=S3defence_node1720028098466, keys1=["team_id", "season"], keys2=["team_id", "season"], transformation_ctx="Join1_node1720030079578")

# Script generated for node Change join 2 Schema
Changejoin2Schema_node1720034144971 = ApplyMapping.apply(frame=Join2_node1720033785892, mappings=[("team_id", "long", "team_id", "long"), ("season", "string", "season", "string"), ("yellowcards", "long", "yellowcards", "long"), ("redcards", "long", "redcards", "long"), ("fouls", "long", "fouls", "long"), ("offsides", "long", "offsides", "long"), ("`.team_id`", "long", "`.team_id`", "long"), ("passes", "string", "passes", "string"), ("passespermatch", "double", "passespermatch", "double"), ("passaccuracy%", "string", "passaccuracy%", "string"), ("crosses", "long", "crosses", "long"), ("crossaccuracy%", "string", "crossaccuracy%", "string")], transformation_ctx="Changejoin2Schema_node1720034144971")

# Script generated for node Change join 2 Schema
Changejoin2Schema_node1720034089633 = ApplyMapping.apply(frame=Join1_node1720030079578, mappings=[("team_id", "long", "team_id", "long"), ("season", "string", "season", "string"), ("goals", "long", "goals", "long"), ("goalspermatch", "double", "goalspermatch", "decimal"), ("shots", "long", "shots", "int"), ("shotsontarget", "long", "shotsontarget", "int"), ("shootingaccuracy%", "string", "shootingaccuracy%", "string"), ("penaltiesscored", "long", "penaltiesscored", "int"), ("bigchancescreated", "long", "bigchancescreated", "int"), ("hitwoodwork", "long", "hitwoodwork", "int"), ("`.team_id`", "long", "`.team_id`", "long"), ("cleansheets", "long", "cleansheets", "long"), ("goalconceded", "long", "goalconceded", "long"), ("goalsconcededpermatch", "double", "goalsconcededpermatch", "double"), ("saves", "long", "saves", "long"), ("tackle", "long", "tackle", "long"), ("tacklesuccess%", "string", "tacklesuccess%", "string"), ("blockedshots", "long", "blockedshots", "long"), ("interceptions", "long", "interceptions", "long"), ("clearances", "string", "clearances", "string"), ("headedclearance", "long", "headedclearance", "long"), ("aerialbattle/duelswon", "string", "aerialbattle/duelswon", "string"), ("errorsleadingtogoal", "long", "errorsleadingtogoal", "long"), ("owngoals", "long", "owngoals", "long")], transformation_ctx="Changejoin2Schema_node1720034089633")

# Script generated for node Join 1-2
Join12_node1720033878098 = Join.apply(frame1=Changejoin2Schema_node1720034089633, frame2=Changejoin2Schema_node1720034144971, keys1=["team_id", "season"], keys2=["team_id", "season"], transformation_ctx="Join12_node1720033878098")

# Script generated for node Change join 1-2 Schema
Changejoin12Schema_node1720034506921 = ApplyMapping.apply(frame=Join12_node1720033878098, mappings=[("team_id", "long", "team_id", "long"), ("season", "string", "season", "string"), ("goals", "long", "goals", "long"), ("goalspermatch", "decimal", "goalspermatch", "decimal"), ("shots", "int", "shots", "int"), ("shotsontarget", "int", "shotsontarget", "int"), ("shootingaccuracy%", "string", "shootingaccuracy%", "string"), ("penaltiesscored", "int", "penaltiesscored", "int"), ("bigchancescreated", "int", "bigchancescreated", "int"), ("hitwoodwork", "int", "hitwoodwork", "int"), ("cleansheets", "long", "cleansheets", "long"), ("goalconceded", "long", "goalconceded", "long"), ("goalsconcededpermatch", "double", "goalsconcededpermatch", "double"), ("saves", "long", "saves", "long"), ("tackle", "long", "tackle", "long"), ("tacklesuccess%", "string", "tacklesuccess%", "string"), ("blockedshots", "long", "blockedshots", "long"), ("interceptions", "long", "interceptions", "long"), ("clearances", "string", "clearances", "string"), ("headedclearance", "long", "headedclearance", "long"), ("aerialbattle/duelswon", "string", "aerialbattle/duelswon", "string"), ("errorsleadingtogoal", "long", "errorsleadingtogoal", "long"), ("owngoals", "long", "owngoals", "long"), ("yellowcards", "long", "yellowcards", "long"), ("redcards", "long", "redcards", "long"), ("fouls", "long", "fouls", "long"), ("offsides", "long", "offsides", "long"), ("`..team_id`", "long", "`..team_id`", "long"), ("passes", "string", "passes", "string"), ("passespermatch", "double", "passespermatch", "double"), ("passaccuracy%", "string", "passaccuracy%", "string"), ("crosses", "long", "crosses", "long"), ("crossaccuracy%", "string", "crossaccuracy%", "string")], transformation_ctx="Changejoin12Schema_node1720034506921")

# Script generated for node Join 3
Join3_node1720034357271 = Join.apply(frame1=S3stats_node1720031079357, frame2=Changejoin12Schema_node1720034506921, keys1=["team_id", "season"], keys2=["team_id", "season"], transformation_ctx="Join3_node1720034357271")

# Script generated for node Change join 3 Schema
Changejoin3Schema_node1720034461154 = ApplyMapping.apply(frame=Join3_node1720034357271, mappings=[("team_id", "long", "team_id", "long"), ("teamname", "string", "teamname", "string"), ("season", "string", "season", "string"), ("matches_played", "long", "matches_played", "long"), ("wins", "long", "wins", "long"), ("losses", "long", "losses", "long"), ("goals", "long", "goals", "long"), ("goal_conceded", "long", "goal_conceded", "long"), ("clean_sheet", "long", "clean_sheet", "long"), ("`.team_id`", "long", "`.team_id`", "long"), ("`.goals`", "long", "`.goals`", "long"), ("goalspermatch", "decimal", "goalspermatch", "decimal"), ("shots", "int", "shots", "int"), ("shotsontarget", "int", "shotsontarget", "int"), ("shootingaccuracy%", "string", "shootingaccuracy%", "string"), ("penaltiesscored", "int", "penaltiesscored", "int"), ("bigchancescreated", "int", "bigchancescreated", "int"), ("hitwoodwork", "int", "hitwoodwork", "int"), ("cleansheets", "long", "cleansheets", "long"), ("goalconceded", "long", "goalconceded", "long"), ("goalsconcededpermatch", "double", "goalsconcededpermatch", "double"), ("saves", "long", "saves", "long"), ("tackle", "long", "tackle", "long"), ("tacklesuccess%", "string", "tacklesuccess%", "string"), ("blockedshots", "long", "blockedshots", "long"), ("interceptions", "long", "interceptions", "long"), ("clearances", "string", "clearances", "string"), ("headedclearance", "long", "headedclearance", "long"), ("aerialbattle/duelswon", "string", "aerialbattle/duelswon", "string"), ("errorsleadingtogoal", "long", "errorsleadingtogoal", "long"), ("owngoals", "long", "owngoals", "long"), ("yellowcards", "long", "yellowcards", "long"), ("redcards", "long", "redcards", "long"), ("fouls", "long", "fouls", "long"), ("offsides", "long", "offsides", "long"), ("`..team_id`", "long", "`..team_id`", "long"), ("passes", "string", "passes", "string"), ("passespermatch", "double", "passespermatch", "double"), ("passaccuracy%", "string", "passaccuracy%", "string"), ("crosses", "long", "crosses", "long"), ("crossaccuracy%", "string", "crossaccuracy%", "string")], transformation_ctx="Changejoin3Schema_node1720034461154")

# Script generated for node final Join
finalJoin_node1720034825479 = Join.apply(frame1=Changejoin3Schema_node1720034461154, frame2=S3overview_node1720028099561, keys1=["team_id"], keys2=["team_id"], transformation_ctx="finalJoin_node1720034825479")

# Script generated for node Change Schema
ChangeSchema_node1720034940338 = ApplyMapping.apply(frame=finalJoin_node1720034825479, mappings=[("team_id", "long", "team_id", "int"), ("teamname", "string", "teamname", "varchar"), ("season", "string", "season", "varchar"), ("matches_played", "long", "matches_played", "int"), ("wins", "long", "wins", "int"), ("losses", "long", "losses", "int"), ("goals", "long", "goals", "int"), ("goal_conceded", "long", "goal_conceded", "int"), ("clean_sheet", "long", "clean_sheet", "int"), ("goalspermatch", "decimal", "goalspermatch", "decimal"), ("shots", "int", "shots", "int"), ("shotsontarget", "int", "shotsontarget", "int"), ("shootingaccuracy%", "string", "shootingaccuracy%", "string"), ("penaltiesscored", "int", "penaltiesscored", "int"), ("bigchancescreated", "int", "bigchancescreated", "int"), ("hitwoodwork", "int", "hitwoodwork", "int"), ("cleansheets", "long", "cleansheets", "int"), ("goalconceded", "long", "goalconceded", "int"), ("goalsconcededpermatch", "double", "goalsconcededpermatch", "decimal"), ("saves", "long", "saves", "int"), ("tackle", "long", "tackle", "int"), ("tacklesuccess%", "string", "tacklesuccess", "varchar"), ("blockedshots", "long", "blockedshots", "int"), ("interceptions", "long", "interceptions", "int"), ("clearances", "string", "clearances", "varchar"), ("headedclearance", "long", "headedclearance", "int"), ("aerialbattle/duelswon", "string", "aerialbattleduelswon", "varchar"), ("errorsleadingtogoal", "long", "errorsleadingtogoal", "int"), ("owngoals", "long", "owngoals", "int"), ("yellowcards", "long", "yellowcards", "int"), ("redcards", "long", "redcards", "int"), ("fouls", "long", "fouls", "int"), ("offsides", "long", "offsides", "int"), ("passes", "string", "passes", "int"), ("passespermatch", "double", "passespermatch", "decimal"), ("passaccuracy%", "string", "passaccuracy", "varchar"), ("crosses", "long", "crosses", "int"), ("crossaccuracy%", "string", "crossaccuracy", "varchar"), ("clubbadge", "string", "clubbadge", "varchar"), ("homekit", "string", "homekit", "varchar"), ("awaykit", "string", "awaykit", "varchar"), ("thirdkit", "string", "thirdkit", "varchar")], transformation_ctx="ChangeSchema_node1720034940338")

# Script generated for node Amazon Redshift
AmazonRedshift_node1720037319331 = glueContext.write_dynamic_frame.from_options(frame=ChangeSchema_node1720034940338, connection_type="redshift", connection_options={"postactions": "BEGIN; MERGE INTO public.demo USING public.demo_temp_h1bm23 ON demo.team_id = demo_temp_h1bm23.team_id AND demo.season = demo_temp_h1bm23.season WHEN MATCHED THEN UPDATE SET team_id = demo_temp_h1bm23.team_id, teamname = demo_temp_h1bm23.teamname, season = demo_temp_h1bm23.season, matches_played = demo_temp_h1bm23.matches_played, wins = demo_temp_h1bm23.wins, losses = demo_temp_h1bm23.losses, goals = demo_temp_h1bm23.goals, goal_conceded = demo_temp_h1bm23.goal_conceded, clean_sheet = demo_temp_h1bm23.clean_sheet, goalspermatch = demo_temp_h1bm23.goalspermatch, shots = demo_temp_h1bm23.shots, shotsontarget = demo_temp_h1bm23.shotsontarget, shootingaccuracy% = demo_temp_h1bm23.shootingaccuracy%, penaltiesscored = demo_temp_h1bm23.penaltiesscored, bigchancescreated = demo_temp_h1bm23.bigchancescreated, hitwoodwork = demo_temp_h1bm23.hitwoodwork, cleansheets = demo_temp_h1bm23.cleansheets, goalconceded = demo_temp_h1bm23.goalconceded, goalsconcededpermatch = demo_temp_h1bm23.goalsconcededpermatch, saves = demo_temp_h1bm23.saves, tackle = demo_temp_h1bm23.tackle, tacklesuccess = demo_temp_h1bm23.tacklesuccess, blockedshots = demo_temp_h1bm23.blockedshots, interceptions = demo_temp_h1bm23.interceptions, clearances = demo_temp_h1bm23.clearances, headedclearance = demo_temp_h1bm23.headedclearance, aerialbattleduelswon = demo_temp_h1bm23.aerialbattleduelswon, errorsleadingtogoal = demo_temp_h1bm23.errorsleadingtogoal, owngoals = demo_temp_h1bm23.owngoals, yellowcards = demo_temp_h1bm23.yellowcards, redcards = demo_temp_h1bm23.redcards, fouls = demo_temp_h1bm23.fouls, offsides = demo_temp_h1bm23.offsides, passes = demo_temp_h1bm23.passes, passespermatch = demo_temp_h1bm23.passespermatch, passaccuracy = demo_temp_h1bm23.passaccuracy, crosses = demo_temp_h1bm23.crosses, crossaccuracy = demo_temp_h1bm23.crossaccuracy, clubbadge = demo_temp_h1bm23.clubbadge, homekit = demo_temp_h1bm23.homekit, awaykit = demo_temp_h1bm23.awaykit, thirdkit = demo_temp_h1bm23.thirdkit WHEN NOT MATCHED THEN INSERT VALUES (demo_temp_h1bm23.team_id, demo_temp_h1bm23.teamname, demo_temp_h1bm23.season, demo_temp_h1bm23.matches_played, demo_temp_h1bm23.wins, demo_temp_h1bm23.losses, demo_temp_h1bm23.goals, demo_temp_h1bm23.goal_conceded, demo_temp_h1bm23.clean_sheet, demo_temp_h1bm23.goalspermatch, demo_temp_h1bm23.shots, demo_temp_h1bm23.shotsontarget, demo_temp_h1bm23.shootingaccuracy%, demo_temp_h1bm23.penaltiesscored, demo_temp_h1bm23.bigchancescreated, demo_temp_h1bm23.hitwoodwork, demo_temp_h1bm23.cleansheets, demo_temp_h1bm23.goalconceded, demo_temp_h1bm23.goalsconcededpermatch, demo_temp_h1bm23.saves, demo_temp_h1bm23.tackle, demo_temp_h1bm23.tacklesuccess, demo_temp_h1bm23.blockedshots, demo_temp_h1bm23.interceptions, demo_temp_h1bm23.clearances, demo_temp_h1bm23.headedclearance, demo_temp_h1bm23.aerialbattleduelswon, demo_temp_h1bm23.errorsleadingtogoal, demo_temp_h1bm23.owngoals, demo_temp_h1bm23.yellowcards, demo_temp_h1bm23.redcards, demo_temp_h1bm23.fouls, demo_temp_h1bm23.offsides, demo_temp_h1bm23.passes, demo_temp_h1bm23.passespermatch, demo_temp_h1bm23.passaccuracy, demo_temp_h1bm23.crosses, demo_temp_h1bm23.crossaccuracy, demo_temp_h1bm23.clubbadge, demo_temp_h1bm23.homekit, demo_temp_h1bm23.awaykit, demo_temp_h1bm23.thirdkit); DROP TABLE public.demo_temp_h1bm23; END;", "redshiftTmpDir": "s3://aws-glue-assets-211125327538-us-east-1/temporary/", "useConnectionProperties": "true", "dbtable": "public.demo_temp_h1bm23", "connectionName": "Redshift connection", "preactions": "CREATE TABLE IF NOT EXISTS public.demo (team_id INTEGER, teamname VARCHAR, season VARCHAR, matches_played INTEGER, wins INTEGER, losses INTEGER, goals INTEGER, goal_conceded INTEGER, clean_sheet INTEGER, goalspermatch DECIMAL, shots INTEGER, shotsontarget INTEGER, shootingaccuracy% VARCHAR, penaltiesscored INTEGER, bigchancescreated INTEGER, hitwoodwork INTEGER, cleansheets INTEGER, goalconceded INTEGER, goalsconcededpermatch DECIMAL, saves INTEGER, tackle INTEGER, tacklesuccess VARCHAR, blockedshots INTEGER, interceptions INTEGER, clearances VARCHAR, headedclearance INTEGER, aerialbattleduelswon VARCHAR, errorsleadingtogoal INTEGER, owngoals INTEGER, yellowcards INTEGER, redcards INTEGER, fouls INTEGER, offsides INTEGER, passes INTEGER, passespermatch DECIMAL, passaccuracy VARCHAR, crosses INTEGER, crossaccuracy VARCHAR, clubbadge VARCHAR, homekit VARCHAR, awaykit VARCHAR, thirdkit VARCHAR); DROP TABLE IF EXISTS public.demo_temp_h1bm23; CREATE TABLE public.demo_temp_h1bm23 (team_id INTEGER, teamname VARCHAR, season VARCHAR, matches_played INTEGER, wins INTEGER, losses INTEGER, goals INTEGER, goal_conceded INTEGER, clean_sheet INTEGER, goalspermatch DECIMAL, shots INTEGER, shotsontarget INTEGER, shootingaccuracy% VARCHAR, penaltiesscored INTEGER, bigchancescreated INTEGER, hitwoodwork INTEGER, cleansheets INTEGER, goalconceded INTEGER, goalsconcededpermatch DECIMAL, saves INTEGER, tackle INTEGER, tacklesuccess VARCHAR, blockedshots INTEGER, interceptions INTEGER, clearances VARCHAR, headedclearance INTEGER, aerialbattleduelswon VARCHAR, errorsleadingtogoal INTEGER, owngoals INTEGER, yellowcards INTEGER, redcards INTEGER, fouls INTEGER, offsides INTEGER, passes INTEGER, passespermatch DECIMAL, passaccuracy VARCHAR, crosses INTEGER, crossaccuracy VARCHAR, clubbadge VARCHAR, homekit VARCHAR, awaykit VARCHAR, thirdkit VARCHAR);"}, transformation_ctx="AmazonRedshift_node1720037319331")

job.commit()
